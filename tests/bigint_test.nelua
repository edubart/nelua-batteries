local BigInt = require 'bigint'

do -- empty
  local x: BigInt
  assert(#x == 0)
  assert(x:bitlen() == 0)
  assert(x:sign() == 0)
  assert(not x:isvalid())
end

do -- new
  local x = BigInt.new()
  assert(x == 0)
  assert(#x == 0)
  assert(x:bitlen() == 0)
  assert(x:sign() == 0)
  assert(x:isvalid())
  x:destroy()
end

do -- frominteger
  local x <close> = BigInt.frominteger(0) assert(x:isvalid() and x == 0 and #x == 0)
  local x <close> = BigInt.frominteger(2) assert(x:isvalid() and x == 2 and #x == 1)
  local x <close> = BigInt.frominteger(0xfff) assert(x == 0xfff and #x == 2)
end

do -- fromstring
  local x <close> = BigInt.fromstring('') assert(not x:isvalid())
  local x <close> = BigInt.fromstring('invalid') assert(not x:isvalid())
  local x <close> = BigInt.fromstring('0') assert(x:isvalid())
  local x <close> = BigInt.fromstring('2') assert(x:isvalid() and x == 2)
  local x <close> = BigInt.fromstring('0000ffff', 16) assert(x == 0xffff)
end

do -- frombytes
  local x <close> = BigInt.frombytes('') assert(x:isvalid() and x == 0)
  local x <close> = BigInt.frombytes('\x13\x37') assert(x:isvalid() and x == 0x1337)
  local x <close> = BigInt.frombytes('\x13\x37', true) assert(x == 0x3713)
end

do -- from
  local x <close> = BigInt.from(1) assert(x == 1)
  local x <close> = BigInt.from(0x7fffffff) assert(x == 0x7fffffff)
  local x <close> = BigInt.from('0x7fffffff') assert(x == 0x7fffffff)
  local x <close> = BigInt.from('2147483647') assert(x == 2147483647)
end

do -- clone
  local x <close> = BigInt.from(0x1337)
  local y <close> = x:clone()
  assert(x == y)
end

do -- copy
  local x = BigInt.from(0x1337)
  local y <close> = BigInt.from(0x1338)
  x:copy_(y)
  assert(x == y)
  x:destroy()
end

do -- getbit
  local one <close> = BigInt.from(0b10101)
  assert(one:getbit(0) == 1)
  assert(one:getbit(1) == 0)
  assert(one:getbit(2) == 1)
  assert(one:getbit(3) == 0)
  assert(one:getbit(4) == 1)
  assert(one:getbit(5) == 0)
  assert(one:getbit(6) == 0)
end

do -- sign
  local x <close> = BigInt.from(2) assert(x:sign() == 1)
  local x <close> = BigInt.from(-2) assert(x:sign() == -1)
  local x <close> = BigInt.from(0) assert(x:sign() == 0)
end
do -- tointeger
  assert(BigInt.tointeger('0x7fffffff') == 0x7fffffff)
  assert(BigInt.tointeger('0x0123456789abcdef0123456789abcdef') & 0xfffffff == 0x9abcdef)
end

do -- tobytes
  local s <close> = BigInt.tobytes('0x1337') assert(s == '\x13\x37')
  local s <close> = BigInt.tobytes('0x1337', true) assert(s == '\x37\x13')
  local s <close> = BigInt.tobytes('0x0137', false, 4) assert(s == '\x00\x00\x01\x37')
  local s <close> = BigInt.tobytes('0x0137', true, 4) assert(s == '\x37\x01\x00\x00')
end

do -- tostring
  local b0 <close> = BigInt.tostring(0) assert(b0 == '0')
  local b10 <close> = BigInt.tostring(0x7fffffff) assert(b10 == '2147483647')
  local b16 <close> = BigInt.tostring(0x7fffffff, 16) assert(b16 == '7fffffff')
  local b2 <close> = BigInt.tostring(9, 2) assert(b2 == '1001')

  local b16 <close> = BigInt.tostring(0xab, 16, 0) assert(b16 == 'ab')
  local b16 <close> = BigInt.tostring(0xab, 16, 1) assert(b16 == 'ab')
  local b16 <close> = BigInt.tostring(0xab, 16, 2) assert(b16 == 'ab')
  local b16 <close> = BigInt.tostring(0xab, 16, 3) assert(b16 == '0ab')
  local b16 <close> = BigInt.tostring(0xab, 16, 4) assert(b16 == '00ab')
end

do -- comparison
  local i1 <close> = BigInt.from(1)
  local i2 <close> = BigInt.from(2)
  assert(i1 == i1) assert(not (i1 == i2))
  assert(i1 ~= i2) assert(not (i1 ~= i1))
  assert(i1 <= i1) assert(i1 <= i2) assert(not (i1 >= i2))
  assert(i1 >= i1) assert(i2 >= i1) assert(not (i2 <= i1))
  assert(i1 < i2) assert(not (i1 < i1)) assert(not (i2 < i1))
  assert(i2 > i1) assert(not (i1 > i1)) assert(not (i1 > i2))
end

do -- arithmetic operations
  local i2 <close> = BigInt.from(2)
  local n2 <close> = BigInt.from(-2)
  local i3 <close> = BigInt.from(3)
  local i5 <close> = BigInt.from(5)
  local i18 <close> = BigInt.from(18)
  local x <close> = -i3 assert(x == -3)
  local x <close> = i3 + i5 assert(x == 8)
  local x <close> = i5 - i3 assert(x == 2)
  local x <close> = i3 * i5 assert(x == 15)
  local x <close> = i18 /// i5 assert(x == i3)
  local x <close> = i18 %%% i5 assert(x == i3)
  local x <close> = i2 ^ 1 assert(x == 2)
  local x <close> = i2 ^ 2 assert(x == 4)
  local x <close> = i2 ^ 3 assert(x == 8)
  local x <close> = i2 ^ 5 assert(x == 32)
  local x <close> = n2 ^ 2 assert(x == 4)
  local x <close> = n2 ^ 3 assert(x == -8)
end

do -- bitwise shifts
  local i15 <close> = BigInt.from(15)
  local x <close> = i15 << 0 assert(x == 15)
  local x <close> = i15 << 1 assert(x == 30)
  local x <close> = i15 << 2 assert(x == 60)

  local x <close> = i15 >> 0 assert(x == 15)
  local x <close> = i15 >> 1 assert(x == 7)
  local x <close> = i15 >> 2 assert(x == 3)

  local m15 <close> = BigInt.from(-15)
  local x <close> = m15 << 0 assert(x == -15)
  local x <close> = m15 << 1 assert(x == -30)
  local x <close> = m15 << 2 assert(x == -60)

  local n2 <close> = BigInt.from(-2)
  local x <close> = n2 >>> 1 assert(x == -1)
end

do -- bitwise operations
  local x <close> =  BigInt.bor(0b01010, 0b10010) assert(x == 0b11010)
  local x <close> = BigInt.band(0b01010, 0b10010) assert(x == 0b00010)
  local x <close> = BigInt.bxor(0b01010, 0b10011) assert(x == 0b11001)
  local x <close> = BigInt.bnot(26) assert(x == -27)
end

do -- tdivrem
  local q <close>, r <close> = BigInt.tdivrem(17, 5)
  assert(q == 3) assert(r == 2)
end

do -- powmod
  local x <close> = BigInt.powmod(11, 7, 3) assert(x == 2)
end

do -- invmod
  local x <close> = BigInt.invmod(11, 3) assert(x == 2)
end

do -- gcd
  local x <close> = BigInt.gcd(36, 20) assert(x == 4)
end

do -- lcm
  local x <close> = BigInt.lcm(21, 6) assert(x == 42)
end

do -- abs
  local x <close> = BigInt.abs(-1337) assert(x == 1337)
  local x <close> = BigInt.abs(1337) assert(x == 1337)
end

do -- randombytes
  math.randomseed(0)
  local x: BigInt <close> = BigInt.randombytes(32)
  assert(#x == 32)
end

do -- randomrange
  for i=1,10 do
    local x: BigInt <close> = BigInt.random(2)
    assert(x >= 0 and x <= 1)
  end
end

do -- division and modulo operations
  local x <close> = BigInt.tdiv(7, 3) assert(x == 2)
  local x <close> = BigInt.tdiv(-7, 3) assert(x == -2)
  local x <close> = BigInt.tdiv(7, -3) assert(x == -2)
  local x <close> = BigInt.tdiv(-7, -3) assert(x == 2)
  local x <close> = BigInt.tdiv(7, 4) assert(x == 1)
  local x <close> = BigInt.tdiv(-7, 4) assert(x == -1)
  local x <close> = BigInt.tdiv(7, -4) assert(x == -1)
  local x <close> = BigInt.tdiv(-7, -4) assert(x == 1)

  local x <close> = BigInt.fdiv(7, 3) assert(x == 2)
  local x <close> = BigInt.fdiv(-7, 3) assert(x == -3)
  local x <close> = BigInt.fdiv(7, -3) assert(x == -3)
  local x <close> = BigInt.fdiv(-7, -3) assert(x == 2)
  local x <close> = BigInt.fdiv(7, 4) assert(x == 1)
  local x <close> = BigInt.fdiv(-7, 4) assert(x == -2)
  local x <close> = BigInt.fdiv(7, -4) assert(x == -2)
  local x <close> = BigInt.fdiv(-7, -4) assert(x == 1)

  local x <close> = BigInt.cdiv(7, 3) assert(x == 3)
  local x <close> = BigInt.cdiv(-7, 3) assert(x == -2)
  local x <close> = BigInt.cdiv(7, -3) assert(x == -2)
  local x <close> = BigInt.cdiv(-7, -3) assert(x == 3)
  local x <close> = BigInt.cdiv(7, 4) assert(x == 2)
  local x <close> = BigInt.cdiv(-7, 4) assert(x == -1)
  local x <close> = BigInt.cdiv(7, -4) assert(x == -1)
  local x <close> = BigInt.cdiv(-7, -4) assert(x == 2)

  local x <close> = BigInt.rdiv(7, 3) assert(x == 2)
  local x <close> = BigInt.rdiv(-7, 3) assert(x == -2)
  local x <close> = BigInt.rdiv(7, -3) assert(x == -2)
  local x <close> = BigInt.rdiv(-7, -3) assert(x == 2)
  local x <close> = BigInt.rdiv(7, 4) assert(x == 2)
  local x <close> = BigInt.rdiv(-7, 4) assert(x == -2)
  local x <close> = BigInt.rdiv(7, -4) assert(x == -2)
  local x <close> = BigInt.rdiv(-7, -4) assert(x == 2)

  local x <close> = BigInt.mod(7, 3) assert(x == 1)
  local x <close> = BigInt.mod(-7, 3) assert(x == 2)
  local x <close> = BigInt.mod(7, -3) assert(x == 1)
  local x <close> = BigInt.mod(-7, -3) assert(x == 2)

  local x <close> = BigInt.tmod(7, 3) assert(x == 1)
  local x <close> = BigInt.tmod(-7, 3) assert(x == -1)
  local x <close> = BigInt.tmod(7, -3) assert(x == 1)
  local x <close> = BigInt.tmod(-7, -3) assert(x == -1)

  local x <close> = BigInt.fmod(7, 3) assert(x == 1)
  local x <close> = BigInt.fmod(-7, 3) assert(x == 2)
  local x <close> = BigInt.fmod(7, -3) assert(x == -2)
  local x <close> = BigInt.fmod(-7, -3) assert(x == -1)
end
