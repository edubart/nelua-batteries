--[[
Resource pool library.

Used internally by the 'io' module to properly handle dangling files.

This is an utility class that provides a mechanism for allocating
resources from a pool associated with an unique id.

The resource pool returns a new unique id for every new allocated object.
This id is composed by an index in the lower bits and a generation counter
in the higher bits. The generation counter is incremented every new allocation
for the same index.

It's main use is to give the possibility to detect dangling accesses,
that is, trying to access an object which no longer exists or that
has been reused. It's not possible to detect these situations when using
just raw pointers.

*Remarks*: When using this class don't store pointers for resources allocated
with it because every new resource allocation may trigger a global reallocation
in the pool and possibly invalidating all pointers.
]]

require 'memory'
require 'allocators.general'

local SLOT_SHIFT <comptime> = 32
local SLOT_MASK <comptime> = (1 << SLOT_SHIFT) - 1
local INIT_SIZE <comptime> = 64

## local make_SlotPoolT = generalize(function(Allocator)
  local Allocator: type = #[Allocator]#

  -- Auxiliary class to allocate slot ids.
  local SlotPoolT: type = @record{
    size: uint32, -- size of the slot pool
    queue_top: uint32, -- points to the next entry in the free queue
    gen_ctrs: span(uint32), -- generation counters indexable by pool slot index
    free_queue: span(uint32), -- list of free slot indexes
    allocator: Allocator
  }

  -- Reserve space in the slot pool.
  function SlotPoolT:reserve(size: uint32): void
    -- return early if there is already enough space
    if size <= self.size then return end
    -- slot 0 is reserved for the invalid id, so bump the pool size by 1
    self.gen_ctrs = self.allocator:xspanrealloc0(self.gen_ctrs, size+1)
    -- can only reserve 'size' here
    self.free_queue = self.allocator:xspanrealloc0(self.free_queue, size)
    -- never allocate the zero-th pool item since the invalid id is 0
    for i:uint32=size,self.size+1,-1 do
      self.free_queue[self.queue_top] = i
      self.queue_top = self.queue_top + 1
    end
    self.size = size
  end

  -- Clears the slot pool and resets its state.
  function SlotPoolT:destroy(): void
    self.allocator:spandealloc(self.free_queue)
    self.allocator:spandealloc(self.gen_ctrs)
    self.size = 0
    self.queue_top = 0
    self.gen_ctrs = {}
    self.free_queue = {}
  end

  -- Allocates a slot index into the slot pool, increasing the pool as needed.
  function SlotPoolT:acquire_index(): uint32
    if unlikely(self.queue_top == 0) then
      -- free list is empty, allocate more space
      local newsize: uint32
      if self.size == 0 then
        newsize = INIT_SIZE
      else
        check(self.size < 0x80000000, 'slot pool exhausted')
        newsize = self.size * 2
      end
      self:reserve(newsize)
    end
    self.queue_top = self.queue_top - 1
    local slot_index: uint32 = self.free_queue[self.queue_top]
    check(slot_index > 0 and slot_index <= self.size, 'invalid slot index')
    return slot_index
  end

  -- Free an index from the slot pool to be reused, bumps the generation counter.
  function SlotPoolT:release_index(slot_index: uint32): void
    check(self.queue_top + 1 <= self.size, 'slot queue overflow')
    check(slot_index > 0 and slot_index <= self.size, 'invalid slot index')
    check(self.gen_ctrs[slot_index] < SLOT_MASK, 'generation counter overflow')
    self.free_queue[self.queue_top] = slot_index
    self.queue_top = self.queue_top + 1
    self.gen_ctrs[slot_index] = self.gen_ctrs[slot_index] + 1 -- increment generation
  end

  --[[
  Retrieves the slot index of a slot id.
  Invalid or older-generation ids are returned as 0.
  ]]
  function SlotPoolT:get_index(id: uint64): uint32
    -- the slot index is the low bits of the id
    local slot_index: uint32 = (@uint32)(id & SLOT_MASK)
    -- check invalid slot index
    if unlikely(slot_index == 0 or slot_index > self.size) then return 0 end
    -- the generation id is the higher bits of the id
    local slot_genid: uint32 = (@uint32)(id >> SLOT_SHIFT)
    -- check for invalid ids from old generations
    if unlikely(slot_genid ~= self.gen_ctrs[slot_index]) then return 0 end
    return slot_index
  end

  --[[
  Allocates a slot in the slot pool, growing the pool as needed.
  Returns its generational id.
  ]]
  function SlotPoolT:acquire_slot(): (uint64, uint32)
    local slot_index: uint32 = self:acquire_index()
    local slot_genid: uint32 = self.gen_ctrs[slot_index]
    local slot_id: uint64 = ((@uint64)(slot_genid) << SLOT_SHIFT) | (slot_index & SLOT_MASK)
    return slot_id, slot_index
  end

  ## return SlotPoolT
## end)

## local make_ResourcePoolT = generalize(function(T, Allocator, SlotAllocator)
  ## static_assert(traits.is_type(T), "invalid type '%s'", T)
  ## if not Allocator then
  require 'allocators.default'
  ## Allocator = DefaultAllocator
  ## end

  local SlotPool: type = #[make_SlotPoolT(SlotAllocator or Allocator)]#
  local Allocator: type = #[Allocator]#
  local T: type = @#[T]#

  -- The resource pool class specialized for type T.
  local ResourcePoolT: type <nickname #[string.format('ResourcePool(%s)', T)]#> = @record{
    slot_pool: SlotPool, -- pool of slots id
    items: span(T), -- span holding all resources
    allocator: Allocator
  }

  ##[[
  ResourcePoolT.value.is_resourcepool = true
  ResourcePoolT.value.subtype = T
  ]]

  -- Grows pool items as needed.
  local function grow_items(self: *ResourcePoolT): void
    if self.items.size < self.slot_pool.gen_ctrs.size then
      -- slot pool has grown, allocate more space
      self.items = self.allocator:xspanrealloc0(self.items, self.slot_pool.gen_ctrs.size)
    end
  end

  -- Reserves the pool to contains at least `size` resources.
  function ResourcePoolT:reserve(size: usize): void
    self.slot_pool:reserve(size)
    grow_items(self)
  end

  --[[
  Resets the pool to zeroed state, freeing all resources.
  This must be called manually to avoid memory leaks when not using a GC allocator.
  ]]
  function ResourcePoolT:destroy(): void
    self.slot_pool:destroy()
    self.allocator:spandealloc(self.items)
    self.items = {}
  end

  --[[
  Returns a pointer to a resource associated with an id.
  The resource id must be valid.
  ]]
  function ResourcePoolT:at(id: uint64): *T
    local slot_index: uint32 = self.slot_pool:get_index(id)
    check(slot_index ~= 0, 'invalid pool id')
    return &self.items[slot_index]
  end

  --[[
  Returns a pointer to a resource associated with an id.
  In case the resource id is invalid then returns `nilptr`.
  ]]
  function ResourcePoolT:get(id: uint64): *T
    local slot_index: uint32 = self.slot_pool:get_index(id)
    if unlikely(slot_index == 0) then return nilptr end
    return &self.items[slot_index]
  end

  -- Allocates a new resource in the pool returning its id fallowed by its pointer.
  function ResourcePoolT:acquire(): (uint64, *T)
    local slot_id: uint64, slot_index: uint32 = self.slot_pool:acquire_slot()
    grow_items(self)
    return slot_id, &self.items[slot_index]
  end

  --[[
  Frees the resource associated with an id from the pool.
  In case the resource id is 0, then does nothing.
  The resource id must be valid.
  ]]
  function ResourcePoolT:release(id: uint64): void
    if id == 0 then return end
    local slot_index: uint32 = self.slot_pool:get_index(id)
    check(slot_index ~= 0, 'invalid slot index')
    self.slot_pool:release_index(slot_index)
    self.items[slot_index] = (@T)() -- zero the resource
  end

  -- Return number of used resources in the pool.
  function ResourcePoolT:count(): isize
    return (@isize)(self.slot_pool.size - self.slot_pool.queue_top)
  end

  ## return ResourcePoolT
## end)

-- The resource pool generic type.
global resourcepool: type = #[make_ResourcePoolT]#
