--[[
File system module.

Contains various utilities to manages files, directories and links.

Most functions from this library returns 3 values:
* First is the operation result, which may be false or empty in case the operation failed.
* Second is an error message, in case the operation failed.
* Third is a system dependent error code, which is zero when the operation succeeds.
]]

require 'string'

----------------------------------------------------------------------------------------------------

## if ccinfo.is_windows then -- Import Windows APIs
-- fcntl.h
local O_BINARY: cint <cimport'_O_BINARY',cinclude'<fcntl.h>',const>
local O_RDONLY: cint <cimport'_O_RDONLY',cinclude'<fcntl.h>',const>
local O_WRONLY: cint <cimport'_O_WRONLY',cinclude'<fcntl.h>',const>
local O_CREAT: cint <cimport'_O_CREAT',cinclude'<fcntl.h>',const>
local O_TRUNC: cint <cimport'_O_TRUNC',cinclude'<fcntl.h>',const>
-- io.h
local function open(file: cstring, oflag: cint, mode: cuint): cint <cimport'_open',cinclude'<io.h>'> end
local function close(fd: cint): cint <cimport'_close',cinclude'<io.h>'> end
local function read(fd: cint, buf: pointer, n: cuint): cint <cimport'_read',cinclude'<io.h>'> end
local function write(fd: cint, buf: pointer, n: cuint): cint <cimport'_write',cinclude'<io.h>'> end
local function unlink(name: cstring): cint <cimport'_unlink',cinclude'<io.h>'> end
-- direct.h
local function chdir(path: cstring): cint <cimport'_chdir',cinclude'<direct.h>'> end
local function getcwd(buf: cstring, size: csize): cstring <cimport'_getcwd',cinclude'<direct.h>'> end
local function mkdir(path: cstring): cint <cimport'_mkdir',cinclude'<direct.h>'> end
local function rmdir(path: cstring): cint <cimport'_rmdir',cinclude'<direct.h>'> end
-- sys/stat.h
local stat_t: type <cimport,cinclude'<sys/stat.h>',ctypedef'_stat64'> = @record{
  st_dev: cint,
  st_ino: cshort,
  st_mode: cushort,
  st_nlink: culong,
  st_uid: cshort,
  st_gid: cshort,
  st_rdev: cint,
  st_size: int64,
  st_atime: int64,
  st_mtime: int64,
  st_ctime: int64,
}
local _S_IREAD: cuint <cimport,cinclude'<sys/stat.h>',const>
local _S_IWRITE: cuint <cimport,cinclude'<sys/stat.h>',const>
local _S_IFREG: cuint <cimport,cinclude'<sys/stat.h>',const>
local _S_IFDIR: cuint <cimport,cinclude'<sys/stat.h>',const>
local _S_IFCHR: cuint <cimport,cinclude'<sys/stat.h>',const>
local _S_IFLNK: cuint <comptime> = 0x400
local function S_ISREG(mode: cuint): boolean return mode & _S_IFREG ~= 0 end
local function S_ISDIR(mode: cuint): boolean return mode & _S_IFDIR ~= 0 end
local function S_ISCHR(mode: cuint): boolean return mode & _S_IFCHR ~= 0 end
local function S_ISLNK(mode: cuint): boolean return mode & _S_IFLNK ~= 0 end
local function S_ISFIFO(mode: cuint): boolean return false end
local function S_ISSOCK(mode: cuint): boolean return false end
local function S_ISBLK(mode: cuint): boolean return false end
local function stat(file: cstring, buf: *stat_t): cint <cimport'_stat64',cinclude'<sys/stat.h>'> end
local function fstat(fd: cint, buf: *stat_t): cint <cimport'_fstat64',cinclude'<sys/stat.h>'> end
local function chmod(file: cstring, mode: cuint): cint <cimport'_chmod',cinclude'<sys/stat.h>'> end
-- sys/utime.h
local utimbuf: type <cimport,cinclude'<sys/utime.h>',ctypedef'_utime64'> = @record{
  actime: int64,
  modtime: int64
}
local function utime(file: cstring, times: *utimbuf): cint <cimport'_utime64',cinclude'<sys/utime.h>'> end
-- windows.h
local WIN32_FILE_ATTRIBUTE_DATA: type <cimport,cinclude'@windows.h',cincomplete> = @record{
  dwFileAttributes: clong
}
local GetFileExInfoStandard: cint<cimport,cinclude'@windows.h',const>
local GENERIC_READ: clong <cimport,cinclude'@windows.h',const>
local FILE_SHARE_READ: clong <cimport,cinclude'@windows.h',const>
local FILE_SHARE_WRITE: clong <cimport,cinclude'@windows.h',const>
local OPEN_EXISTING: clong <cimport,cinclude'@windows.h',const>
local FILE_ATTRIBUTE_NORMAL: clong <cimport,cinclude'@windows.h',const>
local FILE_NAME_OPENED: clong <cimport,cinclude'@windows.h',const>
local FILE_ATTRIBUTE_REPARSE_POINT: clong <cimport,cinclude'@windows.h',const>
local INVALID_HANDLE_VALUE: pointer <cimport,cinclude'@windows.h',const>
local function GetFileAttributesEx(lpFileName: cstring, fInfoLevelId: cint, lpFileInformation: pointer): cint <cimport,cinclude'@windows.h'> end
local function CreateSymbolicLinkA(to: cstring, from: cstring, flags: clong): byte <cimport,cinclude'@windows.h'> end
local function CreateHardLinkA(to: cstring, from: cstring, attrs: pointer): cint <cimport,cinclude'@windows.h'> end
local function GetLastError(): clong <cimport,cinclude'@windows.h'> end
local function CloseHandle(hObject: pointer): cint <cimport,cinclude'@windows.h'> end
local function CreateFileA(
  lpFileName: cstring,
  dwDesiredAccess: clong,
  dwShareMode: clong,
  lpSecurityAttributes: pointer,
  dwCreationDisposition: clong,
  dwFlagsAndAttributes: clong,
  hTemplateFile: pointer
): pointer <cimport,cinclude'@windows.h'> end
local function GetFinalPathNameByHandleA(
  hFile: pointer,
  lpszFilePath: cstring,
  cchFilePath: clong,
  dwFlags: clong
): clong <cimport,cinclude'@windows.h'> end
## else -- Import POSIX APIs
-- fcntl.h
local O_BINARY: cint <comptime> = 0
local O_RDONLY: cint <cimport,cinclude'<fcntl.h>',const>
local O_WRONLY: cint <cimport,cinclude'<fcntl.h>',const>
local O_CREAT: cint <cimport,cinclude'<fcntl.h>',const>
local O_TRUNC: cint <cimport,cinclude'<fcntl.h>',const>
local function open(file: cstring, oflag: cint, mode: cuint): cint <cimport,cinclude'<fcntl.h>'> end
-- unistd.h
local function getcwd(buf: cstring, size: csize): cstring <cimport,cinclude'<unistd.h>'> end
local function chdir(path: cstring): cint <cimport,cinclude'<unistd.h>'> end
local function rmdir(path: cstring): cint <cimport,cinclude'<unistd.h>'> end
local function symlink(from: cstring, to: cstring): cint <cimport,cinclude'<unistd.h>'> end
local function unlink(name: cstring): cint <cimport,cinclude'<unistd.h>'> end
local function link(from: cstring, to: cstring): cint <cimport,cinclude'<unistd.h>'> end
local function readlink(path: cstring, buf: cstring, len: csize): clong <cimport,cinclude'<unistd.h>'> end
local function chown(file: cstring, owner: cuint, group: cuint): cint <cimport,cinclude'<unistd.h>'> end
local function close(fd: cint): cint <cimport,cinclude'<unistd.h>'> end
local function read(fd: cint, buf: pointer, n: csize): clong <cimport,cinclude'<unistd.h>'> end
local function write(fd: cint, buf: pointer, n: csize): clong <cimport,cinclude'<unistd.h>'> end
-- sys/stat.h
local stat_t: type <cimport,cinclude'<sys/stat.h>',cincomplete,ctypedef'stat'> = @record{
  st_dev: culong,
  st_ino: culong,
  st_nlink: culong,
  st_mode: cuint,
  st_uid: cuint,
  st_gid: cuint,
  st_rdev: culong,
  st_size: clong,
  st_blksize: clong,
  st_blocks: clong,
  st_atime: int64,
  st_mtime: int64,
  st_ctime: int64,
}
local S_IRUSR: cuint <cimport,cinclude'<sys/stat.h>',const>
local S_IWUSR: cuint <cimport,cinclude'<sys/stat.h>',const>
local S_IXUSR: cuint <cimport,cinclude'<sys/stat.h>',const>
local S_IRGRP: cuint <cimport,cinclude'<sys/stat.h>',const>
local S_IWGRP: cuint <cimport,cinclude'<sys/stat.h>',const>
local S_IXGRP: cuint <cimport,cinclude'<sys/stat.h>',const>
local S_IROTH: cuint <cimport,cinclude'<sys/stat.h>',const>
local S_IWOTH: cuint <cimport,cinclude'<sys/stat.h>',const>
local S_IXOTH: cuint <cimport,cinclude'<sys/stat.h>',const>
local function S_ISREG(mode: cuint): boolean <cimport,cinclude'<sys/stat.h>'> end
local function S_ISDIR(mode: cuint): boolean <cimport,cinclude'<sys/stat.h>'> end
local function S_ISCHR(mode: cuint): boolean <cimport,cinclude'<sys/stat.h>'> end
local function S_ISLNK(mode: cuint): boolean <cimport,cinclude'<sys/stat.h>'> end
local function S_ISFIFO(mode: cuint): boolean <cimport,cinclude'<sys/stat.h>'> end
local function S_ISSOCK(mode: cuint): boolean <cimport,cinclude'<sys/stat.h>'> end
local function S_ISBLK(mode: cuint): boolean <cimport,cinclude'<sys/stat.h>'> end
local function stat(file: cstring, buf: *stat_t): cint <cimport,cinclude'<sys/stat.h>'> end
local function fstat(fd: cint, buf: *stat_t): cint <cimport,cinclude'<sys/stat.h>'> end
local function lstat(file: cstring, buf: *stat_t): cint <cimport,cinclude'<sys/stat.h>'> end
local function chmod(file: cstring, mode: cuint): cint <cimport,cinclude'<sys/stat.h>'> end
local function mkdir(path: cstring, mode: cuint): cint <cimport,cinclude'<sys/stat.h>'> end
-- sys/utime.h
local utimbuf: type <cimport,cinclude'<utime.h>',ctypedef> = @record{
  actime: int64,
  modtime: int64
}
local function utime(file: cstring, times: *utimbuf): cint <cimport,cinclude'<utime.h>'> end
## end
-- C APIs
local function rename(old: cstring, new: cstring): cint <cimport,cinclude'<stdio.h>'> end
local function strerror(errnum: cint): cstring <cimport,cinclude'<string.h>'> end
local errno: cint <cimport,cinclude'<errno.h>'>
local EINTR: cint <cimport,cinclude'<errno.h>'>

----------------------------------------------------------------------------------------------------

-- The file system namespace.
global fs = @record{}

-- Character separator for directories.
global fs.sep: string <comptime> = #[ccinfo.is_windows and '\\' or '/']#

-- File status kind.
global fs.StatKind = @enum(uint32){
  INVALID = 0,
  FILE,
  DIRECTORY,
  LINK,
  SOCKET,
  PIPE,
  CHARACTER,
  BLOCK,
  OTHER,
}

-- File status information.
global fs.StatInfo = @record{
  kind: fs.StatKind,
  dev: uint64,
  ino: uint64,
  nlink: uint64,
  mode: uint32,
  uid: uint32,
  gid: uint32,
  rdev: uint64,
  size: int64,
  atime: int64,
  mtime: int64,
  ctime: int64,
  blksize: int64, -- not available in Windows
  blocks: int64, -- not available in Windows
}

-- Maximum path name size.
local MAX_PATH_SIZE <comptime> = 4096

-- Chunk size when reading or writing files.
local IO_CHUNK_SIZE <comptime> = 4096

local function result_from_errno(ok: boolean): (boolean, string, integer)
  if not ok then
    return false, strerror(errno), errno
  end
  return true, (@string){}, 0
end

local function kind_from_mode(mode: cuint): fs.StatKind
  if S_ISREG(mode) then
    return fs.StatKind.FILE
  elseif S_ISDIR(mode) then
    return fs.StatKind.DIRECTORY
  elseif S_ISLNK(mode) then
    return fs.StatKind.LINK
  elseif S_ISSOCK(mode) then
    return fs.StatKind.SOCKET
  elseif S_ISFIFO(mode) then
    return fs.StatKind.PIPE
  elseif S_ISCHR(mode) then
    return fs.StatKind.CHARACTER
  elseif S_ISBLK(mode) then
    return fs.StatKind.BLOCK
  end
  return fs.StatKind.OTHER
end

-- Checks if a directory exists.
function fs.isdir(path: string): boolean
  local st: stat_t
  return stat(path, &st) == 0 and S_ISDIR(st.st_mode)
end

-- Checks if a file exists.
function fs.isfile(path: string): boolean
  local st: stat_t
  return stat(path, &st) == 0 and not S_ISDIR(st.st_mode)
end

-- Returns the current working directory.
function fs.cwdir(): (string, string, integer)
  local buf: [MAX_PATH_SIZE]cchar
  if getcwd(&buf, #buf) == nilptr then
    return (@string){}, strerror(errno), errno
  end
  return string.copy(&buf), (@string){}, 0
end

-- Changes the current working directory.
function fs.chdir(path: string): (boolean, string, integer)
  return result_from_errno(chdir(path) == 0)
end

-- Changes permissions of a file.
function fs.chmod(path: string, mode: uint32): (boolean, string, integer)
  return result_from_errno(chmod(path, mode) == 0)
end

-- Changes ownership of a file.
function fs.chown(path: string, uid: uint32, gid: uint32): (boolean, string, integer)
  ## if ccinfo.is_windows then
  return false, 'not implemented yet', -1
  ## else
  return result_from_errno(chown(path, uid, gid) == 0)
  ## end
end

-- Creates a directory.
function fs.mkdir(path: string): (boolean, string, integer)
  ## if ccinfo.is_windows then
  return result_from_errno(mkdir(path) == 0)
  ## else
  local mode: cuint = S_IRUSR|S_IWUSR|S_IXUSR|S_IRGRP|S_IWGRP|S_IXGRP|S_IROTH|S_IXOTH
  return result_from_errno(mkdir(path, mode) == 0)
  ## end
end

--[[
Creates a file into `path` and write `contents`.
If `contents` is not present then an empty is created.
If the file exists, it will be overwritten.
]]
function fs.mkfile(path: string, contents: facultative(string)): (boolean, string, integer)
  ## if ccinfo.is_windows then
  local fd: cint = open(path, O_CREAT|O_WRONLY|O_TRUNC|O_BINARY, _S_IREAD|_S_IWRITE)
  ## else
  local fd: cint = open(path, O_CREAT|O_WRONLY|O_TRUNC|O_BINARY, S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH)
  ## end
  if fd < 0 then
    return result_from_errno(false)
  end
  defer close(fd) end
  ## if not contents.type.is_niltype then
  if contents.size > 0 then
    local writtenbytes: usize = 0
    repeat -- keep writing until all bytes are written
      local remaining: usize = contents.size - writtenbytes
      if remaining > IO_CHUNK_SIZE then remaining = IO_CHUNK_SIZE end
      local writebytes: isize = write(fd, &contents.data[writtenbytes], remaining)
      if writebytes < 0 and errno ~= EINTR then
        return result_from_errno(false)
      elseif writebytes > 0 then
        -- the write may be incomplete, keep writing until finished
        writtenbytes = writtenbytes + (@usize)(writebytes)
      end
    until writtenbytes >= contents.size
  end
  ## end
  return true, (@string){}, 0
end

--[[
Creates a link for object `oldpath` at `newpath`.
By default symbolic links are created, unless `hardlink` is true.
]]
function fs.mklink(oldpath: string, newpath: string, hard: facultative(boolean)): (boolean, string, integer)
  ## if not hard.is_niltype then
  local hard: boolean = false
  ## end
  ## if ccinfo.is_windows then
  local res: cint
  if hard then
    res = CreateSymbolicLinkA(newpath, oldpath, fs.isdir(oldpath) and 1 or 0)
  else
    res = CreateHardLinkA(newpath, oldpath, nilptr)
  end
  if res == 0 then
    return false, 'windows error', GetLastError()
  end
  return true, (@string){}, 0
  ## else
  return result_from_errno((hard and link(oldpath, newpath) or symlink(oldpath, newpath)) == 0)
  ## end
end

-- Removes a directory.
function fs.rmdir(path: string): (boolean, string, integer)
  return result_from_errno(rmdir(path) == 0)
end

-- Removes a file.
function fs.rmfile(path: string): (boolean, string, integer)
  return result_from_errno(unlink(path) == 0)
end

-- Moves a file or directory.
function fs.move(oldpath: string, newpath: string): (boolean, string, integer)
  return result_from_errno(rename(oldpath, newpath) == 0)
end

-- Updates access and modification time of a file.
function fs.touch(path: string): (boolean, string, integer)
  return result_from_errno(utime(path, nilptr) == 0)
end

-- Gets file status information.
function fs.stat(path: string, linkstat: facultative(boolean)): (fs.StatInfo, string, integer)
  ## if linkstat.type.is_niltype then
  local linkstat: boolean = false
  ## end
  local st: stat_t
  local res: cint
  if linkstat then
    ## if ccinfo.is_windows then
    local win32buffer: WIN32_FILE_ATTRIBUTE_DATA
    if GetFileAttributesEx(path, GetFileExInfoStandard, &win32buffer) ~= 0 and
        win32buffer.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT ~= 0 then
      st.st_mode = _S_IFLNK
    else
      res = stat(path, &st)
    end
    ## else
    res = lstat(path, &st)
    ## end
  else
    res = stat(path, &st)
  end
  if res ~= 0 then
    return (@fs.StatInfo){}, strerror(errno), errno
  end
  local si: fs.StatInfo = {
    kind = kind_from_mode(st.st_mode),
    dev = st.st_dev,
    ino = st.st_ino,
    nlink = st.st_nlink,
    mode = st.st_mode,
    uid = st.st_uid,
    gid = st.st_gid,
    rdev = st.st_rdev,
    size = st.st_size,
    atime = st.st_atime,
    mtime = st.st_mtime,
    ctime = st.st_ctime,
  }
  ## if not ccinfo.is_windows then
  si.blksize = st.st_blksize
  si.blocks = st.st_blocks
  ## end
  return si, (@string){}, 0
end

-- Reads all contents from a file.
function fs.readfile(path: string): (string, string, integer)
  local fd: cint = open(path, O_RDONLY|O_BINARY, 0)
  if fd < 0 then
    return (@string){}, strerror(errno), errno
  end
  defer close(fd) end
  local sb: stringbuilder
  repeat -- read in chunks
    local p: span(byte) = sb:prepare(IO_CHUNK_SIZE)
    if p:empty() then
      sb:destroy()
      return (@string){}, 'out of buffer memory', -1
    end
    local nr: isize = read(fd, p.data, IO_CHUNK_SIZE)
    if nr < 0 and errno ~= EINTR then
      sb:destroy()
      return (@string){}, strerror(errno), errno
    elseif nr > 0 then
      sb:commit((@usize)(nr))
    end
  until nr < IO_CHUNK_SIZE
  return sb:promote(), (@string){}, 0
end

-- Reads value from a symbolic link file.
function fs.readlink(path: string): (string, string, integer)
  local buf: [MAX_PATH_SIZE+1]cchar
  ## if ccinfo.is_windows then
  local h: pointer = CreateFileA(path, GENERIC_READ,
                                 FILE_SHARE_READ | FILE_SHARE_WRITE, nilptr,
                                 OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, nilptr);
  if h == INVALID_HANDLE_VALUE then
    return (@string){}, 'windows error', GetLastError()
  end
  defer CloseHandle(h) end
  local len: clong = GetFinalPathNameByHandleA(h, &buf, #buf, FILE_NAME_OPENED)
  if len < 0 then
    return (@string){}, 'windows error', GetLastError()
  end
  ## else
  local len: clong = readlink(path, &buf, #buf)
  if len < 0 then
    return (@string){}, strerror(errno), errno
  end
  ## end
  if len == #buf then
    return (@string){}, 'buffer truncated', -1
  end
  return string{data=&buf,size=(@usize)(len)}:copy(), (@string){}, 0
end

--[[
Copies file from `oldpath` to `newpath`.
If a file exists in `newpath`, it will be overwritten.
File permissions are preserved.
]]
function fs.cpfile(oldpath: string, newpath: string): (boolean, string, integer)
  -- acquire a file descriptor for the input file
  local ifd: cint = open(oldpath, O_RDONLY|O_BINARY, 0)
  if ifd < 0 then return result_from_errno(false) end
  defer close(ifd) end
  -- retrieve mode information from the input file
  local si: stat_t
  if fstat(ifd, &si) ~= 0 then return result_from_errno(false) end
  -- create an output file and acquire its FD
  local ofd: cint = open(newpath, O_CREAT|O_WRONLY|O_TRUNC|O_BINARY, si.st_mode)
  if ofd < 0 then return result_from_errno(false) end
  defer close(ofd) end
  -- perform file copy in chunks until end of file
  repeat
    local buf: [IO_CHUNK_SIZE]cchar
    local readbytes: isize = read(ifd, &buf[0], #buf)
    if readbytes < 0 then return result_from_errno(false) end
    if readbytes > 0 then -- read some bytes
      local writtenbytes: usize = 0
      repeat -- keep writing until all read bytes are written
        local writebytes: isize = write(ofd, &buf[writtenbytes], (@usize)(readbytes) - writtenbytes)
        if writebytes < 0 and errno ~= EINTR then
          return result_from_errno(false)
        elseif writebytes > 0 then
          -- the write may be incomplete, keep writing until finished
          writtenbytes = writtenbytes + (@usize)(writebytes)
        end
      until writtenbytes >= (@usize)(readbytes)
    end
  until readbytes == 0
  return true, (@string){}, 0
end

--[[
TODO:
* lock/unlock file APIs
* use string representation for file modes?
* `walkdir` iterator to walk over all entries from a directory
* convert system error codes to library error codes
]]

return fs
